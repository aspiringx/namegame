// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  firstName      String?
  lastName       String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  // Relations
  accounts         Account[]
  sessions         Session[]
  codes            Code[]
  photos           Photo[]
  messages         Message[]
  greetingsSent    Greeting[]  @relation("GreetingUser1")
  greetingsRcvd    Greeting[]  @relation("GreetingUser2")
  userRelations1   UserUser[]  @relation("User1Relation")
  userRelations2   UserUser[]  @relation("User2Relation")
  groupMemberships GroupUser[]

  @@map("users")
}

model UserUser {
  user1        User      @relation("User1Relation", fields: [user1Id], references: [id])
  user1Id      String
  user2        User      @relation("User2Relation", fields: [user2Id], references: [id])
  user2Id      String
  group        Group     @relation(fields: [groupId], references: [id])
  groupId      Int
  greetCount   Int       @default(0)
  relationType UserUserRelationType @default(acquaintance)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@id([user1Id, user2Id, groupId])
  @@map("user_users")
}

model Group {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  address     String?
  phone       String?
  parentId    Int?
  idTree      String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  codes         Code[]
  links         Link[]
  iceBreakers   IceBreaker[]
  photos        Photo[]
  userRelations UserUser[]
  members       GroupUser[]

  @@map("groups")
}

model GroupUser {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   Int
  role      GroupUserRole @default(member)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([userId, groupId])
  @@map("group_users")
}

model Code {
  id            Int      @id @default(autoincrement())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  parentGroupId Int
  groupId       Int
  group         Group    @relation(fields: [groupId], references: [id])
  url           String   @unique
  geo           String? // Store as string for now
  createdAt     DateTime @default(now())

  @@unique([userId, groupId, geo])
  @@map("codes")
}

model Photo {
  id         Int       @id @default(autoincrement())
  userId     String?
  user       User?     @relation(fields: [userId], references: [id])
  groupId    Int
  group      Group     @relation(fields: [groupId], references: [id])
  entityType EntityType
  entityId   Int
  url        String
  type       PhotoType @default(other)
  isBlocked  Boolean   @default(false)
  uploadedAt DateTime  @default(now())
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?

  @@map("photos")
}

model Message {
  id            Int       @id @default(autoincrement())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  entityType    EntityType
  entityId      Int
  message       String
  recipientType String
  recipientId   Int
  isBlocked     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?

  @@map("messages")
}

model Greeting {
  id        Int      @id @default(autoincrement())
  user1      User     @relation("GreetingUser1", fields: [user1Id], references: [id])
  user1Id    String
  user2      User     @relation("GreetingUser2", fields: [user2Id], references: [id])
  user2Id    String
  geo       String? // Store as string for now
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("greetings")
}

model IceBreaker {
  id        Int      @id @default(autoincrement())
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id])
  question  String
  createdAt DateTime @default(now())

  @@map("ice_breakers")
}

enum UserUserRelationType {
  acquaintance
  friend
  family
}

enum GroupUserRole {
  owner
  admin
  member
  super
}

enum EntityType {
  group
  user
}

enum PhotoType {
  logo
  primary
  other
}

model Link {
  id          Int      @id @default(autoincrement())
  groupId     Int
  group       Group    @relation(fields: [groupId], references: [id])
  url         String
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("links")
}
